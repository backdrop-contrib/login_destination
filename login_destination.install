<?php

/**
 * @file
 * Install, update and uninstall functions for the Login Destination module.
 */

/**
 * Implements hook_schema().
 */
function login_destination_schema() {
  $schema['login_destination'] = array(
    'description' => 'Login Destination rules.',
    'fields' => array(
      'id' => array(
        'type' => 'serial',
        'unsigned' => TRUE,
        'not null' => TRUE,
        'description' => 'Primary Key: Unique ID.',
      ),
      'triggers' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Triggers on which to perform redirect',
      ),
      'roles' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Roles to perform redirect for',
      ),
      'pages_type' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Flag to indicate from which pages to redirect. (0 = all pages except listed pages, 1 = only listed pages, 2 = Use custom PHP code)',
      ),
      'pages' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Pages from which to redirect',
      ),
      'destination_type' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'size' => 'tiny',
        'description' => 'Flag to indicate the destination type. (0 = static URL, 1 = PHP code)',
      ),
      'destination' => array(
        'type' => 'text',
        'not null' => TRUE,
        'description' => 'Redirect destination',
      ),
      'weight' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "The rule's weight.",
      ),
      'enabled' => array(
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
        'default' => 1,
        'description' => "The rule enabled/disabled status.",
      ),
    ),
    'primary key' => array('id'),
    'indexes' => array(
      'list' => array('weight'),
    ),
  );

  return $schema;
}

/**
 * Implements hook_install().
 */
function login_destination_install() {
  // Update the alter option of 'user/logout' to TRUE,
  // (menu_save invokes necessary hooks).
  $result = db_query("
    SELECT mlid, menu_name
    FROM {menu_links}
    WHERE link_path = 'user/logout' OR link_path = 'user/login' OR  link_path = 'user'
    ORDER BY mlid ASC");
  foreach ($result as $res) {
    $item = menu_link_load($res->mlid);
    $item['options']['alter'] = TRUE;
    db_update('menu_links')
      ->fields(array(
        'options' => serialize($item['options']),
      ))
      ->condition('mlid', $item['mlid'])
      ->execute();
  }
}

/**
 * Migrate variables to config.
 */
function login_destination_update_1000() {
  $config = config('login_destination.settings');
  $config->set('preserve_destination', update_variable_get('login_destination_preserve_destination', FALSE));
  $config->set('immediate_redirect', update_variable_get('login_destination_immediate_redirect', FALSE));

  update_variable_del('login_destination_preserve_destination');
  update_variable_del('login_destination_immediate_redirect');

  $config->save();
}

/**
 * Updates from the Drupal module (7002 and 7003).
 *
 * Clear hooks cache.
 *
 * Automatically give all roles with permission "Administer Users" the new 
 * dedicated permission "Administer Login Destination settings".
 */
function login_destination_update_1001() {
  cache_clear_all('hook_info', 'cache_bootstrap');
  backdrop_set_message(t('The Login Destination module has just been updated.<br>
  A new permission called "Administer Login Destination settings" has now been
  added.<br>Previously the access to the Login Destination\'s settings page was
  managed by the "Administer Users" permission.<br>That\'s why all roles with
  that old permission have been just automatically given the new dedicated
  "Administer Login Destination settings" permission.<br>If you want to
  double-check things, you can go to the
  <a href="/admin/config/people/permissions" title="Permissions page">
  Permissions page</a> now.'));

  $roles = user_roles(TRUE, 'administer users');
  foreach ($roles as $rid => $role_name) {
    user_role_grant_permissions($rid, array('administer login destination settings'));
  }
}

/**
 * Remove the immediate login on one-time redirect setting. Backdrop simplifies
 * the one-time login process (it's now one page instead of two) and this
 * setting is not needed anymore.
 * 
 */

function login_destination_update_1002() {
  $config = config('login_destination.settings');
  $config->delete('immediate_redirect');
}

/**
 * Implements hook_update_last_removed().
 */
function login_destination_update_last_removed() {
  return 7003;
}
